
//!!!!!!! MUCHO IMPORTANTE !!!!!!!!!
// those must be the same as those in _breakpoints.js


$r_xs: 640px;
$r_s: 768px;
$r_m: 1024px;
$r_l: 1200px;
$r_xl: 1480px;
$r_xxl: 1900px;



$mq-b-points: (
  xs:'(min-width: #{$r_xs})', // iphone 6 and bigger (374 maybe? )
  s:'(min-width: #{$r_s})',
  m:'(min-width: #{$r_m})',
  l:'(min-width: #{$r_l})',
  xl:'(min-width: #{$r_xl})',
  xxl:'(min-width: #{$r_xxl})',
  //retina: '(-webkit-min-device-pixel-ratio: 1.5),
  //                    (min--moz-device-pixel-ratio: 1.5),
  //                    (-o-min-device-pixel-ratio: 3/2),
  //                    (min-resolution: 1.5dppx)'
);


$js-b-points: (
  xs:'[min-width~="#{pxToRem($r_xs)}"]',
  s:'[min-width~="#{pxToRem($r_s)}"]',
  m:'[min-width~="#{pxToRem($r_m)}"]',
  l:'[min-width~="#{pxToRem($r_l)}"]',
  xl:'[min-width~="#{pxToRem($r_xl)}"]',
  xxl:'[min-width~="#{pxToRem($r_xxl)}"]',
);


@mixin respond-to($point) {
  @if map-has-key($mq-b-points, $point) {
    @media #{unquote(map-get($mq-b-points, $point))} { @content };

  }
  @else {
    @warn "Your `#{$point}`. doesnt exist"
        + "Please make sure it is defined in `$mq-b-points` map.";
  }
}

// responsive points for responsive columns, sizes should be the same

@mixin js-respond-to($point) {
  @if map-has-key($js-b-points, $point) {
    .js-breakpoint#{unquote(map-get($js-b-points, $point))} { @content };

  }
  @else {
    @warn "Your `#{$point}`. doesnt exist"
        + "Please make sure it is defined in `$js-b-points` map.";
  }
}

body {
  &:before {
    display: none;
    content: 'default';

    @include respond-to(xs) {
      content: 'xs';
    }

    @include respond-to(s) {
      content: 's';
    }

    @include respond-to(m) {
      content: 'm';
    }

    @include respond-to(l) {
      content: 'l';
    }

    @include respond-to(xl) {
      content: 'xl';
    }

    @include respond-to(xxl) {
      content: 'xxl';
    }

  }
}

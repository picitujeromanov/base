
//!!!!!!! MUCHO IMPORTANTE !!!!!!!!!
// those must be the same as those in _breakpoints.js


$r_s: 375px;
$r_m: 555px;
$r_l: 735px;
$r_xl: 1035px;
$r_xxl: 1270px;
$r_xxxl: 1470px;


$mq-b-points: (
        s:'(min-width: #{$r_s})', // iphone 6 and bigger (374 maybe? )
        m:'(min-width: #{$r_m})',
        l:'(min-width: #{$r_l})',
        xl:'(min-width: #{$r_xl})',
        xxl:'(min-width: #{$r_xxl})',
        xxxl:'(min-width: #{$r_xxxl})',
        retina: '(-webkit-min-device-pixel-ratio: 1.5),
                      (min--moz-device-pixel-ratio: 1.5),
                      (-o-min-device-pixel-ratio: 3/2),
                      (min-resolution: 1.5dppx)'
);


$js-b-points: (
        s:'[min-width~="#{pxToRem($r_s)}"]',
        m:'[min-width~="#{pxToRem($r_m)}"]',
        l:'[min-width~="#{pxToRem($r_l)}"]',
        xl:'[min-width~="#{pxToRem($r_xl)}"]',
        xxl:'[min-width~="#{pxToRem($r_xxl)}"]',
        xxxl:'[min-width~="#{pxToRem($r_xxxl)}"]'
);



@mixin respond-to($point) {
  @if map-has-key($mq-b-points, $point) {
    @media #{unquote(map-get($mq-b-points, $point))} { @content };

  }
  @else {
    @warn "Your `#{$point}`. doesnt exist"
        + "Please make sure it is defined in `$mq-b-points` map.";
  }
}

// responsive points for responsive columns, sizes should be the same

@mixin js-respond-to($point) {
  @if map-has-key($js-b-points, $point) {
    .js-breakpoint#{unquote(map-get($js-b-points, $point))} { @content };

  }
  @else {
    @warn "Your `#{$point}`. doesnt exist"
        + "Please make sure it is defined in `$js-b-points` map.";
  }
}


body {
  &:before {
    display: none;
    content: 'default';
    @include respond-to(s) {
      content: 's';
    }

    @include respond-to(m) {
      content: 'm';
    }

    @include respond-to(l) {
      content: 'l';
    }

    @include respond-to(xl) {
      content: 'xl';
    }

    @include respond-to(xxl) {
      content: 'xxl';
    }

    @include respond-to(xxxl) {
      content: 'xxxl';
    }
  }
}